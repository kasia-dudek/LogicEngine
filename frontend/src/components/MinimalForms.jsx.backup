import React, { useEffect, useState } from "react";

/**
 * MinimalForms
 * - pobiera z backendu z /minimal_forms różne postacie zminimalizowane
 * - pokazuje kompaktową tabelę (DNF, CNF, ANF, NOR, NAND, AND, OR)
 * - bezpieczna obsługa błędów i czasu ładowania
 *
 * Props:
 *   expr: string  -> wyrażenie wejściowe
 */
export default function MinimalForms({ expr }) {
  const [data, setData] = useState(null);
  const [err, setErr] = useState("");
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    let mounted = true;
    const fetchForms = async () => {
      setErr("");
      setData(null);
      if (!expr) return;
      const apiUrl = process.env.REACT_APP_API_URL || "";
      if (!apiUrl) {
        setErr("Brak adresu API (REACT_APP_API_URL).");
        return;
      }
      setLoading(true);
      try {
        const res = await fetch(`${apiUrl}/minimal_forms`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ expr }),
        });

        // Jeżeli backend zwróci HTML (np. 404) – nie parsuj od razu JSON
        if (!res.ok) {
          const text = await res.text();
          throw new Error(text || `HTTP ${res.status}`);
        }

        const json = await res.json();
        if (!mounted) return;
        setData(json ?? null);
      } catch (e) {
        if (!mounted) return;
        setErr(`Nie udało się pobrać form minimalnych: ${e.message}`);
      } finally {
        if (mounted) setLoading(false);
      }
    };

    fetchForms();
    return () => {
      mounted = false;
    };
  }, [expr]);

  if (loading) {
    return (
      <div className="mt-8 p-4 bg-gray-50 border border-gray-200 rounded-xl text-gray-700">
        Ładowanie form minimalnych…
      </div>
    );
  }

  if (err) {
    return (
      <div className="mt-8 p-4 bg-red-50 border border-red-200 rounded-xl text-red-700">
        {err}
      </div>
    );
  }

  if (!data) return null;

  // Kolejność i etykiety jak na screenie
  const rows = [
    ["DNF", data.dnf?.expr ?? "—"],
    ["CNF", data.cnf?.expr ?? "—"],
    ["ANF", data.anf?.expr ?? "—"],
    ["NOR", data.nor?.expr ?? "—"],
    ["NAND", data.nand?.expr ?? "—"],
    ["AND", data.andonly?.expr ?? "—"],
    ["OR", data.oronly?.expr ?? "—"],
  ];

  return (
    <div className="mt-8">
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Minimal forms</h3>

      <div className="overflow-x-auto">
        <table className="min-w-[320px] border border-gray-300 rounded-xl text-sm">
          <tbody>
            {rows.map(([label, value]) => (
              <tr key={label}>
                <td className="px-3 py-2 border-b bg-gray-100 font-semibold w-24">
                  {label}
                </td>
                <td className="px-3 py-2 border-b font-mono">{value}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {!!(data.notes && data.notes.length) && (
        <ul className="mt-2 text-xs text-gray-600 list-disc ml-5">
          {data.notes.map((n, i) => (
            <li key={i}>{n}</li>
          ))}
        </ul>
      )}
    </div>
  );
}
